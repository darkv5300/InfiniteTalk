from cog import BasePredictor, Input, Path
import tempfile
import subprocess
import json
import os
import sys

class Predictor(BasePredictor):
    def setup(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° path + ‡πÄ‡∏ä‡πá‡∏Ñ lib ‡πÄ‡∏™‡∏£‡∏¥‡∏° + ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies)"""
        self.ckpt_dir = "weights/Wan2.1-I2V-14B-480P"
        self.wav2vec_dir = "weights/chinese-wav2vec2-base"
        self.infinitetalk_dir = "weights/InfiniteTalk/single/infinitetalk.safetensors"
        
        # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö InfiniteTalk/Wan2.1 (‡∏à‡∏≤‡∏Å repo GitHub)
        # xfuser ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö distributed ‡πÅ‡∏•‡∏∞ DiT inference
        try:
            import subprocess
            subprocess.check_call([sys.executable, "-m", "pip", "install", "xfuser>=0.4.1"])
            print("‚úÖ xfuser installed and ready")
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to install xfuser: {e}. Continuing without it may cause errors.")
        
        # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡∏à‡∏≤‡∏Å InfiniteTalk setup)
        required_packages = [
            "torch==2.4.1",  # ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö environment ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô (cu121 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPU)
            "torchvision==0.19.1",
            "torchaudio==2.4.1",
            "--index-url", "https://download.pytorch.org/whl/cu121",  # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ CUDA 12.1
            "xformers==0.0.28",  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö attention optimization
            "--index-url", "https://download.pytorch.org/whl/cu121",
            "transformers",  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Wav2Vec2
            "librosa",
            "pyloudnorm",
            "einops",
            "soundfile",
            "modelscope",  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å Hugging Face
        ]
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install"] + required_packages)
            print("‚úÖ All dependencies installed")
        except Exception as e:
            print(f"‚ö†Ô∏è Dependency installation warning: {e}")
        
        # optional speed-up libs (‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á xformers ‡πÅ‡∏•‡πâ‡∏ß)
        try:
            import xformers  # noqa
            print("‚úÖ xformers loaded")
        except ImportError:
            print("‚ö†Ô∏è xformers not found, running slower")
        try:
            import flash_attn  # noqa
            print("‚úÖ flash-attn loaded")
        except ImportError:
            print("‚ö†Ô∏è flash-attn not found, continuing without it")
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ xfuser ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        try:
            import xfuser
            print(f"‚úÖ xfuser version {xfuser.__version__} loaded successfully")
        except ImportError:
            raise RuntimeError("‚ùå xfuser installation failed. Cannot proceed with InfiniteTalk.")

    def predict(
        self,
        input_media: Path = Input(description="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (.jpg, .png, .mp4)"),
        audio_file: Path = Input(description="‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏ô‡∏≤‡∏ó‡∏µ)"),
        video_quality: str = Input(
            choices=["480p", "720p"], default="720p", description="‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"
        ),
        mode: str = Input(
            choices=["streaming", "clip"],
            default="streaming",
            description="‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
        ),
        sample_steps: int = Input(
            description="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô sampling steps", default=40
        ),
    ) -> Path:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å InfiniteTalk"""
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° input.json ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö prompt ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        input_json = tempfile.mktemp(suffix=".json")
        with open(input_json, "w", encoding="utf-8") as f:
            json.dump(
                {
                    "prompt": "",  # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° prompt ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ text guidance
                    "cond_video": str(input_media),
                    "cond_audio": str(audio_file),
                },
                f,
                ensure_ascii=False,
            )
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å resolution (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Wan2.1 sizes)
        size = "infinitetalk-720" if video_quality == "720p" else "infinitetalk-480"
        # output path
        output_path = tempfile.mktemp(suffix=".mp4")
        # run InfiniteTalk script (‡πÄ‡∏û‡∏¥‡πà‡∏° error handling ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
        cmd = [
            "python", "generate_infinitetalk.py",
            "--ckpt_dir", self.ckpt_dir,
            "--wav2vec_dir", self.wav2vec_dir,
            "--infinitetalk_dir", self.infinitetalk_dir,
            "--input_json", input_json,
            "--size", size,
            "--sample_steps", str(sample_steps),
            "--mode", mode,
            "--motion_frame", "9",  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö motion consistency ‡πÉ‡∏ô talking head
            "--save_file", output_path,
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° params ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö low VRAM ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (optional)
            # "--num_persistent_param_in_dit", "0",  # ‡∏ñ‡πâ‡∏≤ VRAM ‡∏ô‡πâ‡∏≠‡∏¢
        ]
        print(f"üöÄ Running command: {' '.join(cmd)}")
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            print(f"‚úÖ Command succeeded: {result.stdout}")
            if result.stderr:
                print(f"‚ö†Ô∏è Warnings: {result.stderr}")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error details: {e.stderr}")
            raise RuntimeError(f"‚ùå Model execution failed: {e}. Check if xfuser is properly loaded.")
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ output file ‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
        if not os.path.exists(output_path):
            raise RuntimeError("‚ùå Output video not generated. Check logs.")
        
        return Path(output_path)
